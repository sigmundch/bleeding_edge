// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// DO NOT EDIT
// Auto-generated dart:html library.

#library("dart:html");

#import("dart:isolate");
#import("dart:json");
#import("dart:nativewrappers");

$!GENERATED_DART_FILES

#source('$AUXILIARY_DIR/EventListener.dart');
#source('$AUXILIARY_DIR/KeyLocation.dart');
#source('$AUXILIARY_DIR/KeyName.dart');
#source('$AUXILIARY_DIR/ReadyState.dart');
#source('$AUXILIARY_DIR/Timer.dart');
#source('$AUXILIARY_DIR/_Collections.dart');
#source('$AUXILIARY_DIR/_XMLHttpRequestUtils.dart');
#source('$AUXILIARY_DIR/../../html/src/shared_FactoryProviders.dart');
#source('$AUXILIARY_DIR/../../html/src/dartium_FactoryProviders.dart');
#source('$AUXILIARY_DIR/../../html/src/Isolates.dart');
#source('$AUXILIARY_DIR/../../html/src/Measurement.dart');
#source('$AUXILIARY_DIR/../../html/src/Device.dart');
#source('$AUXILIARY_DIR/../../html/src/_Testing.dart');
#source('$AUXILIARY_DIR/_ListIterators.dart');
#source('$AUXILIARY_DIR/_Lists.dart');
#source('$AUXILIARY_DIR/../../isolate/serialization.dart');

#source('$AUXILIARY_DIR/native_DOMPublic.dart');
#source('$AUXILIARY_DIR/native_DOMImplementation.dart');

Window __window;

Window get window() {
  if (__window !== null) {
    return __window;
  }
  __window = _Utils.window();
  return __window;
}

Window get _window() native "Utils_window";

Document __document;

Document get document() {
  if (__document !== null) {
    return __document;
  }
  __document = _document;
  return __document;
}

Document get _document() => _window.document;

Element query(String selector) => _document.query(selector);
ElementList queryAll(String selector) => _document.queryAll(selector);

class _Null {
  const _Null();
}

final _null = const _Null();

int _getNewIsolateId() => _Utils._getNewIsolateId();

bool _callPortInitialized = false;
var _callPortLastResult = null;

_callPortSync(num id, var message) {
  if (!_callPortInitialized) {
    window.on['js-result'].add((event) {
      _callPortLastResult = JSON.parse(event.data);
    }, false);
    _callPortInitialized = true;
  }
  assert(_callPortLastResult == null);
  _dispatchEvent('js-sync-message', {'id': id, 'message': message});
  var result = _callPortLastResult;
  _callPortLastResult = null;
  return result;
}
